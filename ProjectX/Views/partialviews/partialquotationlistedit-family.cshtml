
@model ProjectX.Entities.Models.Production.ProductionPolicy

@{
	Layout = null;
	var benefitlist = ViewData["benefitlist"] as List<ProjectX.Entities.dbModels.TR_Benefit>;
	var DestinationNames = string.Join(",", Model.Destinations.Select(d => d.DestinationName));
	var UserRights = ViewData["userrights"] as ProjectX.Entities.Models.Users.UserRights;
	var CreatedByUserRights = ViewData["CreatedByuserrights"] as ProjectX.Entities.Models.Users.UserRights;
	var is_admin = ViewData["isAdmin"] as string;
	var showbenefits = "";
	if (benefitlist != null && benefitlist.Count > 0 && (Model.AdditionalBenefits.Count > 0 || (UserRights.Is_Admin == true || Model.IsEditable)))
	{
		showbenefits = "";
	}
	else
		showbenefits = "hidden";

	var hidepremium = "";
	if (UserRights.Hide_Premium_Info == true)
		hidepremium = "hidden";

	var shownet = "";
	if (UserRights.Preview_Net == false)
		shownet = "hidden";

	var previewtotalonly = "";
	if (UserRights.Preview_Total_Only == true)
		previewtotalonly = "hidden";

	var insuredcount = 1;
}

<style>


	

</style>

<div class="card mt-2 mb-0">
	<div class="card-body @(!Model.IsEditable ? "no-click":"")" style="font-size:13px">
		<div>
			<b>Destination(s)</b>
			<span class="float-end dest">@DestinationNames</span>
		</div>
		<div>
			<b>Inception Date</b>
			<span class="float-end incdate">@Model.FromDate.ToString("dd-MM-yyyy")</span>
		</div>
		<div>
			<b>Expiry Date</b>
			<span class="float-end expdate">@Model.ToDate.ToString("dd-MM-yyyy")</span>
		</div>
		<div>
			<b>Duration</b>
			<span class="float-end duration">@Model.Duration Days</span>
		</div>
		<div>
			<span class="float-end total_price" data-currency="USD"></span>
		</div>



		<div class="my-3 mb-1">
			<div class="benlist">
				<ul>
					<li>
						<b>Beneficiaries (@Model.PolicyDetails.Count)</b>
					</li>
					@for (int i = 0; i < Model.PolicyDetails.Count; i++)
					{
						<li>
							@Model.PolicyDetails[i].FirstName @Model.PolicyDetails[i].LastName
						</li>
					}
					@if ((Model.PolicyDetails.Count  + 1) % 3 != 0)
					{
						// Add empty placeholders to make it a multiple of 3
						int emptyCount = 3 - ((Model.PolicyDetails.Count + 1) % 3);
						for (int j = 0; j < emptyCount; j++)
						{
							<li></li>
						}
					}

				</ul>
			</div>
			@{
				var firstItem = Model.PolicyDetails.FirstOrDefault();

				<table class="table table-bordered mt-3 quoatetable insured@(firstItem.Insured)" ins="@firstItem.InsuredId" thisrow="@firstItem.Insured">
					<tbody>
						<tr>
							<td>Plan</td>
							<td colspan="2">
								<select class="form-control plans">
									@*<option value="@firstItem..Plan" data-plan="@firstItem.Plan">
											@firstItem.PlanName
										</option>*@

									<option value="@firstItem.Plan" data-plan="@firstItem.Plan"
											data-insured="@firstItem.Insured"
											data-price="@firstItem.TariffPrice"
											data-tariffid="@firstItem.Tariff">
										@firstItem.PlanName
									</option>
								</select>
							</td>
						</tr>

						<tr class="@showbenefits">
							<td>Additional Benefits</td>
							<td colspan="2">
								<select class="form-control isselect2 benplus" multiple>
									@foreach (var thislist in Model.AdditionalBenefits.Where(x => x.Insuredid == firstItem.InsuredId))
									{
										<option data-benprice="@thislist.Price" value="@thislist.AB_ID" selected>
											@thislist.Name: @thislist.Price USD
										</option>
									}

									@*adding tariff benefits with price that are not save into this policy*@
									@foreach (var thislist in benefitlist)
									{
										var test = Model.AdditionalBenefits.Where(x => x.Insuredid == firstItem.InsuredId).ToList();
										bool benefitExists = Model.AdditionalBenefits.Any(ab => ab.Insuredid == firstItem.InsuredId && ab.AB_ID == thislist.B_Id);

										if (thislist.TariffId == firstItem.Tariff && !benefitExists)
										{
											<option data-benprice="@thislist.B_Benfees" value="@thislist.B_Id">
												@thislist.B_Title: @thislist.B_Benfees USD
											</option>
										}
									}
								</select>
							</td>
						</tr>
						<tr>
							<td>
								Remove Deductible<br />(USD<span data-dedprice="@firstItem.DeductiblePrice"> @firstItem.DeductiblePrice</span>)
								<input type="checkbox" name="name" data-dedprice="@firstItem.DeductiblePrice" class="ml-2" @(firstItem.Deductible ? "checked" : "" ) />
							</td>
							<td>
								Add Sports Activities<br />(USD<span data-sportsprice="@firstItem.SportsActivitiesPrice"> @firstItem.SportsActivitiesPrice</span>)
								<input type="checkbox" name="name" data-sportsprice="@firstItem.SportsActivitiesPrice" class="ml-2" @(firstItem.SportsActivities ? "checked" : "" ) />
							</td>
							<td>
								Price (USD) <br />
								<span class="planprice" data-bprice="@firstItem.PlanPrice"> @firstItem.PlanPrice</span>
							</td>
						</tr>
						<tr class="@((UserRights.Is_Admin ==true)? "":"hidden")">
							<td>
							</td>
							<td>
								Discount (USD) <br />
								<input id="discount" type="number" class="form-control discount" name="discount" step="0.01" autocomplete="off" value="@firstItem.Discount" @((UserRights.Is_Admin == true) ? "" : "readonly")>
							</td>
							<td>
								Final (USD) <br />
								<span id="finalprice" class="finalprice" data-fprice="@firstItem.FinalPrice"> @firstItem.FinalPrice</span>
							</td>
						</tr>
					</tbody>
				</table>
			}

			<table class="table table-bordered  mt-3 totaltable @hidepremium">
				<tbody>
					<tr class="@shownet @previewtotalonly">
						<td> Initial Premium </td>
						<td id="initpremtotal" class="text-end"> @Model.InitialPremium USD </td>
						@if (Model.CurrencyRate.CurrencySymbol != "USD")
						{
							<td id="initpremtotalforeign" class="text-end">
								@String.Format("{0:0.00}", Model.InitialPremium * Convert.ToDecimal(Model.CurrencyRate.Rate)) @Model.CurrencyRate.CurrencySymbol
							</td>
						}
					</tr>
					<tr class="@previewtotalonly">
						<td>Additional @(CreatedByUserRights.Max_Additional_Fees>0 ? "(Max: " + CreatedByUserRights.Max_Additional_Fees + ")" : "")</td>
						<td class="text-end">
							<input type="number" id="additiononprem" name="additiononprem" step="0.01" class="borderless-input" value="@Model.AdditionalValue" max="@CreatedByUserRights.Max_Additional_Fees" oninput="handlemax(this)">
						</td>
						@if (Model.CurrencyRate.CurrencySymbol != "USD")
						{
							<td id="additiononpremforeign" class="text-end"> @String.Format("{0:0.00}", Model.AdditionalValue * Convert.ToDecimal(Model.CurrencyRate.Rate)) @Model.CurrencyRate.CurrencySymbol </td>
						}
					</tr>

					<tr class="@previewtotalonly">
						<td> Tax / VAT </td>
						@if (CreatedByUserRights.Tax_Type == 1)
						{
							<td id="taxvat" class="text-end" txtp="@CreatedByUserRights.Tax_Type" vt="@Convert.ToDecimal((CreatedByUserRights.VAT ?? 0) + (CreatedByUserRights.Tax ?? 0))"> @Model.TaxVATValue USD </td>
							@if (Model.CurrencyRate.CurrencySymbol != "USD")
							{
								<td id="taxvatforeign" class="text-end" vt="@Convert.ToDecimal((CreatedByUserRights.VAT ?? 0) + (CreatedByUserRights.Tax ?? 0))"> @String.Format("{0:0.00}", Model.TaxVATValue * Convert.ToDecimal(Model.CurrencyRate.Rate)) @Model.CurrencyRate.CurrencySymbol </td>
							}
						}
						else
						{
							<td id="taxvat" class="text-end" txtp="@CreatedByUserRights.Tax_Type" tx="@(CreatedByUserRights.Tax ?? 0)" vt="@Convert.ToDecimal(CreatedByUserRights.VAT)"> @Model.TaxVATValue USD </td>
							@if (Model.CurrencyRate.CurrencySymbol != "USD")
							{
								<td id="taxvatforeign" class="text-end" tx="@(CreatedByUserRights.Tax ?? 0)" vt="@Convert.ToDecimal(CreatedByUserRights.VAT)"> @String.Format("{0:0.00}", Model.TaxVATValue * Convert.ToDecimal(Model.CurrencyRate.Rate)) @Model.CurrencyRate.CurrencySymbol </td>
							}
						}
					</tr>
					<tr class="@previewtotalonly">
						<td> Stamps </td>
						<td id="stamps" class="text-end" st="@Convert.ToDecimal(CreatedByUserRights.Stamp)"> @Model.StampsValue USD </td>
						@if (Model.CurrencyRate.CurrencySymbol != "USD")
						{
							<td id="stampsforeign" class="text-end" st="@Convert.ToDecimal(CreatedByUserRights.Stamp)"> @String.Format("{0:0.00}", Model.StampsValue * Convert.ToDecimal(Model.CurrencyRate.Rate)) @Model.CurrencyRate.CurrencySymbol </td>
						}
					</tr>
					<tr>
						<td> Total </td>
						<td id="grandtotal" class="text-end"> @Model.GrandTotal USD </td>
						@if (Model.CurrencyRate.CurrencySymbol != "USD")
						{
							<td id="grandtotalforeign" class="text-end">
								@*@(Model.GrandTotal * Convert.ToDecimal(Model.CurrencyRate.Rate))*@
								@String.Format("{0:0.00}", Model.GrandTotal * Convert.ToDecimal(Model.CurrencyRate.Rate)) @Model.CurrencyRate.CurrencySymbol
							</td>
						}
					</tr>
				</tbody>
			</table>
		</div>
	</div>
</div>

@if (!Model.IsCanceled)
{
	@if ((Model.IsEditable) || is_admin == "True")
	{
		<button id="sendButton" class="mt-3 w-100 btn btn-md btn-primary btn-submit">Save/Update</button>
	}

	<button id="printButton" class="mt-3 w-100 btn btn-md btn-primary btn-submit">Print</button>
}

